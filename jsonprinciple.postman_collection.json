{
	"info": {
		"_postman_id": "01063135-49c1-48e9-b5a4-b9720c57fc2d",
		"name": "jsonprinciple",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET User (Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d78ef370-69bc-4542-b29d-45027375ac65",
						"exec": [
							"pm.test(\"Status code is 404, URL not found\", function () { pm.response.to.have.status(404); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/110",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"110"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d78ef370-69bc-4542-b29d-45027375ac65",
						"exec": [
							"pm.test(\"Response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"pm.test(\"Validate data\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].id).to.equal(1);",
							"    pm.expect(jsonData[0].username).to.equal(\"Bret\");",
							"    pm.expect(jsonData[0].email).to.equal(\"Sincere@april.biz\");",
							"    pm.expect(jsonData[0].address.street).to.equal(\"Kulas Light\");",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d78ef370-69bc-4542-b29d-45027375ac65",
						"exec": [
							"pm.test(\"Response is OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"pm.test(\"Validate User data count\", function(){",
							"    var jsonData = pm.response.json();",
							"pm.expect(jsonData.length).to.equal(10)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User Albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d78ef370-69bc-4542-b29d-45027375ac65",
						"exec": [
							"pm.test(\"Response is OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"pm.test(\"Validate data\", function(){",
							"    var jsonData = pm.response.json();",
							"    var i;",
							"    for (i = 0; i < jsonData.length; i++) { ",
							"         pm.expect(jsonData[i].userId).to.equal(1);",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1/albums",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1",
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d78ef370-69bc-4542-b29d-45027375ac65",
						"exec": [
							"pm.test(\"Response is OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; ",
							"});",
							"pm.test(\"Validate data\", function(){",
							"    var jsonData = pm.response.json();",
							"    var i;",
							"    for (i = 0; i < jsonData.length; i++) { ",
							"         pm.expect(jsonData[i].userId).to.equal(1);",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1/todos",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET User posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d78ef370-69bc-4542-b29d-45027375ac65",
						"exec": [
							"pm.test(\"Response is OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"pm.test(\"Validate data\", function(){",
							"    var jsonData = pm.response.json();",
							"    var i;",
							"    for (i = 0; i < jsonData.length; i++) { ",
							"         pm.expect(jsonData[i].userId).to.equal(1);",
							"    }",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1",
						"posts"
					]
				}
			},
			"response": []
		}
	]
}